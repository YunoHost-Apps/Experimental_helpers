#!/bin/bash


ynh_php_try_bash_extension() {
  if [ -x src/configure ]; then
    src/configure && make -C src || {
      echo "Optional bash extension failed to build, but things will still work normally."
    }
  fi
}

phpenv_install_dir="/opt/phpenv"
php_version_path="$phpenv_install_dir/versions"
# PHPENV_ROOT is the directory of phpenv, it needs to be loaded as a environment variable.
export PHPENV_ROOT="$phpenv_install_dir"

# Required dependencies
phpenv_dependencies="autoconf2.13 autoconf2.64 autoconf bash bison build-essential ca-certificates curl findutils git libbz2-dev libcurl4-gnutls-dev libicu-dev libjpeg-dev libmcrypt-dev libonig-dev libpng-dev libreadline-dev libsqlite3-dev libssl-dev libtidy-dev libxml2-dev libxslt1-dev libzip-dev pkg-config re2c zlib1g-dev"

# Load the version of PHP for an app, and set variables.
#
# ynh_use_php has to be used in any app scripts before using PHP for the first time.
# This helper will provide alias and variables to use in your scripts.
#
# To use gem or PHP, use the alias `ynh_gem` and `ynh_php`
# Those alias will use the correct version installed for the app
# For example: use `ynh_gem install` instead of `gem install`
#
# With `sudo` or `ynh_exec_as`, use instead the fallback variables `$ynh_gem` and `$ynh_php`
# And propagate $PATH to sudo with $ynh_php_load_path
# Exemple: `ynh_exec_as $app $ynh_php_load_path $ynh_gem install`
#
# $PATH contains the path of the requested version of PHP.
# However, $PATH is duplicated into $php_path to outlast any manipulation of $PATH
# You can use the variable `$ynh_php_load_path` to quickly load your PHP version
#  in $PATH for an usage into a separate script.
# Exemple: $ynh_php_load_path $final_path/script_that_use_gem.sh`
#
#
# Finally, to start a PHP service with the correct version, 2 solutions
#  Either the app is dependent of PHP or gem, but does not called it directly.
#  In such situation, you need to load PATH
#    `Environment="__YNH_PHP_LOAD_ENV_PATH__"`
#    `ExecStart=__FINALPATH__/my_app`
#     You will replace __YNH_PHP_LOAD_ENV_PATH__ with $ynh_php_load_path
#
#  Or PHP start the app directly, then you don't need to load the PATH variable
#    `ExecStart=__YNH_PHP__ my_app run`
#     You will replace __YNH_PHP__ with $ynh_php
#
#
# one other variable is also available
#   - $php_path: The absolute path to PHP binaries for the chosen version.
#
# usage: ynh_use_php
#
# Requires YunoHost version 2.7.12 or higher.
ynh_use_php () {
    php_version=$(ynh_app_setting_get --app=$app --key=php_version)

    # Get the absolute path of this version of PHP
    php_path="$php_version_path/$php_version/bin"

    # Allow alias to be used into bash script
    shopt -s expand_aliases

    # Create an alias for the specific version of PHP and a variable as fallback
    ynh_php="$php_path/php"
    alias ynh_php="$ynh_php"

    ynh_fpm_conf="$php_version_path/$php_version/etc/php-fpm.d/$YNH_APP_INSTANCE_NAME.conf"

    # Load the path of this version of PHP in $PATH
    if [[ :$PATH: != *":$php_path"* ]]; then
        PATH="$php_path:$PATH"
    fi
    # Create an alias to easily load the PATH
    ynh_php_load_path="PATH=$PATH"

    # Sets the local application-specific PHP version
    pushd $final_path
        phpenv local $php_version
    popd
}

# Install a specific version of PHP
#
# ynh_install_php will install the version of PHP provided as argument by using phpenv.
#
# phpenv (PHP Version Management) stores the target PHP version in a .php_version file created in the target folder (using phpenv local <version>)
# It then uses that information for every PHP user that uses phpenv provided PHP command
#
# This helper creates a /etc/profile.d/phpenv.sh that configures PATH environment for phpenv
# for every LOGIN user, hence your user must have a defined shell (as opposed to /usr/sbin/nologin)
#
# Don't forget to execute PHP-dependent command in a login environment
# (e.g. sudo --login option)
# When not possible (e.g. in systemd service definition), please use direct path
# to phpenv shims (e.g. $PHPENV_ROOT/shims/bundle)
#
# usage: ynh_install_php --php_version=php_version
# | arg: -v, --php_version= - Version of PHP to install.
#
# Requires YunoHost version 2.7.12 or higher.
ynh_install_php () {
    # Declare an array to define the options of this helper.
    local legacy_args=v
    local -A args_array=( [v]=php_version= )
    local php_version
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    # Install required dependencies
    ynh_add_app_dependencies --package="$phpenv_dependencies"

    # Load phpenv path in PATH
    local CLEAR_PATH="$phpenv_install_dir/bin:$PATH"

    # Remove /usr/local/bin in PATH in case of PHP prior installation
    PATH=$(echo $CLEAR_PATH | sed 's@/usr/local/bin:@@')

    # Move an existing PHP binary, to avoid to block phpenv
    # test -x /usr/bin/PHP && mv /usr/bin/PHP /usr/bin/php_phpenv

    # Instal or update phpenv
    phpenv="$(command -v phpenv $phpenv_install_dir/bin/phpenv | head -1)"
    if [ -n "$phpenv" ]; then
        ynh_print_info --message="phpenv already seems installed in \`$phpenv'."
        pushd "${phpenv%/*}"
            if git remote -v 2>/dev/null | grep -q phpenv; then
                echo "Trying to update with git..."
                git pull --tags origin master
                cd ..
                ynh_php_try_bash_extension
            fi
        popd
    else
        ynh_print_info --message="Installing phpenv with git..."
        mkdir -p $phpenv_install_dir
        pushd $phpenv_install_dir
            git init
            git remote add -f -t master origin https://github.com/sptndc/phpenv.git
            git checkout -b master origin/master
            ynh_php_try_bash_extension
            phpenv=$phpenv_install_dir/bin/phpenv
        popd
    fi

    php_build="$(command -v "$phpenv_install_dir"/plugins/*/bin/phpenv-install phpenv-install | head -1)"

    echo
    if [ -n "$php_build" ]; then
        ynh_print_info --message="\`phpenv install' command already available in \`$php_build'."
        pushd "${php_build%/*}"
            if git remote -v 2>/dev/null | grep -q php-build; then
                ynh_print_info --message="Trying to update with git..."
                git pull origin master
            fi
        popd
    else
        ynh_print_info --message="Installing php-build with git..."
        mkdir -p "${phpenv_install_dir}/plugins"
        git clone https://github.com/php-build/php-build.git "${phpenv_install_dir}/plugins/php-build"
    fi

    git clone --depth 1  "https://github.com/madumlao/phpenv-aliases.git"  "${phpenv_install_dir}/plugins/phpenv-aliases"
    git clone --depth 1  "https://github.com/ngyuki/phpenv-composer.git"  "${phpenv_install_dir}/plugins/phpenv-composer"
    git clone --depth 1 "https://github.com/momo-lab/xxenv-latest.git"   "${phpenv_install_dir}/plugins/xxenv-latest"

    # Enable caching
    mkdir -p "${phpenv_install_dir}/cache"

    # Create shims directory if needed
    mkdir -p "${phpenv_install_dir}/shims"

    # Restore /usr/local/bin in PATH
    PATH=$CLEAR_PATH

    # And replace the old PHP binary
    # test -x /usr/bin/php_phpenv && mv /usr/bin/php_phpenv /usr/bin/PHP

    # Install the requested version of PHP
    local final_php_version=$(phpenv latest --print $php_version)
    ynh_print_info --message="Installation of PHP-$final_php_version"
    phpenv install --skip-existing $final_php_version
    ynh_replace_string --match_string="user = nobody" --replace_string="user = www-data" --target_file="$php_version_path/$final_php_version/etc/php-fpm.d/www.conf"
    ynh_replace_string --match_string="group = nobody" --replace_string="group = www-data" --target_file="$php_version_path/$final_php_version/etc/php-fpm.d/www.conf"
    ynh_replace_string --match_string="listen = 127.0.0.1:9000" --replace_string="listen = /run/php/php$final_php_version-fpm.sock" --target_file="$php_version_path/$final_php_version/etc/php-fpm.d/www.conf"
    ynh_replace_string --match_string="match_string" --replace_string="replace_string" --target_file="$php_version_path/$final_php_version/etc/php-fpm.d/www.conf"
    ynh_replace_string --match_string="match_string" --replace_string="replace_string" --target_file="$php_version_path/$final_php_version/etc/php-fpm.d/www.conf"
    ynh_replace_string --match_string="match_string" --replace_string="replace_string" --target_file="$php_version_path/$final_php_version/etc/php-fpm.d/www.conf"
    ynh_replace_string --match_string="match_string" --replace_string="replace_string" --target_file="$php_version_path/$final_php_version/etc/php-fpm.d/www.conf"
    ynh_replace_string --match_string="match_string" --replace_string="replace_string" --target_file="$php_version_path/$final_php_version/etc/php-fpm.d/www.conf"

    # Store php_version into the config of this app
    ynh_app_setting_set --app=$YNH_APP_INSTANCE_NAME --key=php_version --value=$final_php_version

    # Remove app virtualenv
    if  `phpenv alias --list | grep --quiet "$YNH_APP_INSTANCE_NAME " 1>/dev/null 2>&1`
    then
        phpenv alias $YNH_APP_INSTANCE_NAME --remove
    fi

    # Create app virtualenv
    phpenv alias $YNH_APP_INSTANCE_NAME $final_php_version

    # Cleanup PHP versions
    ynh_cleanup_php

    # Install php-fpm service
    cp -f "$php_version_path/$final_php_version/etc/systemd/system/php-fpm.service" "/etc/systemd/system/php$final_php_version-fpm.service"
    systemctl enable php$final_php_version-fpm --quiet
    systemctl daemon-reload
    systemctl start php$final_php_version-fpm

    # Set environment for PHP users
    echo  "#phpenv
export PHPENV_ROOT=$phpenv_install_dir
export PATH=\"$phpenv_install_dir/bin:$PATH\"
eval \"\$(phpenv init -)\"
    #phpenv" > /etc/profile.d/phpenv.sh

    # Load the environment
    eval "$(phpenv init -)"
}

# Remove the version of PHP used by the app.
#
# This helper will also cleanup PHP versions
#
# usage: ynh_remove_php
ynh_remove_php () {
    local php_version=$(ynh_app_setting_get --app=$YNH_APP_INSTANCE_NAME --key=php_version)

    # Load phpenv path in PATH
    local CLEAR_PATH="$phpenv_install_dir/bin:$PATH"

    # Remove /usr/local/bin in PATH in case of PHP prior installation
    PATH=$(echo $CLEAR_PATH | sed 's@/usr/local/bin:@@')

    phpenv alias $YNH_APP_INSTANCE_NAME --remove

    # Remove the line for this app
    ynh_app_setting_delete --app=$YNH_APP_INSTANCE_NAME --key=php_version

    # Cleanup PHP versions
    ynh_cleanup_php
}

# Remove no more needed versions of PHP used by the app.
#
# This helper will check what PHP version are no more required,
# and uninstall them
# If no app uses PHP, phpenv will be also removed.
#
# usage: ynh_cleanup_php
ynh_cleanup_php () {

    # List required PHP versions
    local installed_apps=$(yunohost app list | grep -oP 'id: \K.*$')
    local required_php_versions=""
    for installed_app in $installed_apps
    do
        local installed_app_php_version=$(yunohost app setting $installed_app php_version)
        if [[ $installed_app_php_version ]]
        then
            required_php_versions="${installed_app_php_version}\n${required_php_versions}"
        fi
    done

    # Remove no more needed PHP versions
    local installed_php_versions=$(phpenv versions --bare --skip-aliases | grep -Ev '/')
    for installed_php_version in $installed_php_versions
    do
        if ! `echo ${required_php_versions} | grep "${installed_php_version}" 1>/dev/null 2>&1`
        then
            ynh_print_info --message="Removing of PHP-$installed_php_version"
            systemctl stop php$installed_php_version-fpm
            systemctl disable php$installed_php_version-fpm --quiet
            ynh_secure_remove --file="/etc/systemd/system/php$installed_php_version-fpm.service"
            $phpenv_install_dir/bin/phpenv uninstall --force $installed_php_version
            systemctl daemon-reload
        fi
    done

    # If none PHP version is required
    if [[ ! $required_php_versions ]]
    then
        # Remove phpenv environment configuration
        ynh_print_info --message="Removing of phpenv"
        ynh_secure_remove --file="$phpenv_install_dir"
        rm /etc/profile.d/phpenv.sh
    fi
}


ynh_add_fpm_config () {
    php_version=$(ynh_app_setting_get --app=$app --key=php_version)
    ynh_use_php
    ynh_add_config --template="../conf/php-fpm.conf" --destination="$ynh_fpm_conf"
    systemctl reload-or-restart php$php_version-fpm
}

ynh_remove_fpm_config () {
    php_version=$(ynh_app_setting_get --app=$app --key=php_version)
    ynh_use_php
    ynh_secure_remove --file="$ynh_fpm_conf"
    systemctl reload-or-restart php$php_version-fpm
}
