#!/bin/bash

# Need also the helper https://github.com/YunoHost-Apps/Experimental_helpers/blob/master/ynh_handle_getopts_args/ynh_handle_getopts_args

pyenv_version=1.2.23
pyenv_virtualenv_version=1.1.5
pyenv_install_dir="/opt/pyenv"
# PYENV_ROOT is the directory of pyenv, it needs to be loaded as a environment variable.
export PYENV_ROOT="$pyenv_install_dir"

# Required dependencies
pyenv_dependencies="build-essential libssl1.0-dev|libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git"

# Install Python Version Management
#
# [internal]
#
# usage: ynh_install_pyenv
ynh_install_pyenv () {
  ynh_print_info --message="Installation of pyenv - Python Version Management - pyenv-$pyenv_version/pyenv-virtualenv-$pyenv_virtualenv_version"

  # Build an app.src for pyenv
  mkdir -p "../conf"
  echo "SOURCE_URL=https://github.com/pyenv/pyenv/archive/v${pyenv_version}.tar.gz
SOURCE_SUM=805058aa5ce257157fb4769543e6a43bac45a88c723ff3c4fcf5b4f759056bf5" > "../conf/pyenv.src"
  # Download and extract pyenv
  ynh_setup_source --dest_dir="$pyenv_install_dir" --source_id=pyenv

  # Build an app.src for pyenv-virtualenv
  mkdir -p "../conf"
  echo "SOURCE_URL=https://github.com/pyenv/pyenv-virtualenv/archive/v${pyenv_virtualenv_version}.tar.gz
SOURCE_SUM=27ae3de027a6f6dccdca4085225512e559c6b94b31625bd2b357a18890a1e618" > "../conf/pyenv-virtualenv.src"
  # Download and extract pyenv-virtualenv
  ynh_setup_source --dest_dir="$pyenv_install_dir/plugins/pyenv-virtualenv" --source_id=pyenv-virtualenv

  (cd $pyenv_install_dir
  ./src/configure && make -C src)

# Create shims directory if needed
if [ ! -d $pyenv_install_dir/shims ] ; then
  mkdir $pyenv_install_dir/shims
fi
}

# Install a specific version of Python
#
# ynh_install_python will install the version of Python provided as argument by using pyenv.
#
# pyenv (Python Version Management) stores the target Python version in a .python_version file created in the target folder (using pyenv local <version>)
# It then uses that information for every Python user that uses pyenv provided Python command
#
# This helper creates a /etc/profile.d/pyenv.sh that configures PATH environment for pyenv
# for every LOGIN user, hence your user must have a defined shell (as opposed to /usr/sbin/nologin)
#
# Don't forget to execute python-dependent command in a login environment
# (e.g. sudo --login option)
# When not possible (e.g. in systemd service definition), please use direct path
# to pyenv shims (e.g. $PYENV_ROOT/shims/bundle)
#
# usage: ynh_install_python --python_version=python_version
# | arg: -v, --python_version= - Version of Python to install.
ynh_install_python () {
  # Declare an array to define the options of this helper.
  declare -Ar args_array=( [v]=python_version= )
  local python_version
  # Manage arguments with getopts
  ynh_handle_getopts_args "$@"

  # Store python_version into the config of this app
  ynh_app_setting_set --app=$YNH_APP_INSTANCE_NAME --key=python_version --value=$python_version

  # Create $pyenv_install_dir if doesn't exist already
  mkdir -p "$pyenv_install_dir/plugins/pyenv-virtualenv"

  # Create the file if doesn't exist already
  touch "$pyenv_install_dir/ynh_app_version"

  # Do not add twice the same line
  if ! grep --quiet "$YNH_APP_INSTANCE_NAME:$python_version" "$pyenv_install_dir/ynh_app_version"
  then

    # Remove previous version
    if grep --quiet "$YNH_APP_INSTANCE_NAME:" "$pyenv_install_dir/ynh_app_version"
    then
      pyenv virtualenv-delete --force $YNH_APP_INSTANCE_NAME
      sed --in-place "/$YNH_APP_INSTANCE_NAME:/d" "$pyenv_install_dir/ynh_app_version"
    fi

    # Store the ID of this app and the version of Python requested for it
    echo "$YNH_APP_INSTANCE_NAME:$python_version" | tee --append "$pyenv_install_dir/ynh_app_version"
  fi

  # Install required dependencies
  ynh_add_app_dependencies --package="$pyenv_dependencies"

  # Load pyenv path in PATH
  CLEAR_PATH="$pyenv_install_dir/bin:$PATH"

  # Remove /usr/local/bin in PATH in case of Python prior installation
  PATH=$(echo $CLEAR_PATH | sed 's@/usr/local/bin:@@')

  # Move an existing Python binary, to avoid to block pyenv
  #test -x /usr/bin/python && mv /usr/bin/python /usr/bin/python_pyenv

  # If pyenv is not previously setup, install it
  if ! type pyenv > /dev/null 2>&1
  then
    ynh_install_pyenv
  elif dpkg --compare-versions "$($pyenv_install_dir/bin/pyenv --version | cut -d" " -f2)" lt $pyenv_version
  then
    ynh_install_pyenv
  elif dpkg --compare-versions "$($pyenv_install_dir/bin/pyenv virtualenv --version | cut -d" " -f2)" lt $pyenv_virtualenv_version
  then
    ynh_install_pyenv
  fi

  # Restore /usr/local/bin in PATH (if needed)
  PATH=$CLEAR_PATH

  # And replace the old Python binary
  # test -x /usr/bin/python_pyenv && mv /usr/bin/python_pyenv /usr/bin/python

  # Install the requested version of Python
  ynh_print_info --message="Installation of Python-"$python_version"
  pyenv install --skip-existing $python_version &>/dev/null

  # Remove no more needed Python version
  installed_python_version=$(pyenv versions --bare --skip-aliases | grep -Ev '/')
  for installed_version in $installed_python_version
  do
    if ! grep --quiet "$installed_version"aliases "$pyenv_install_dir/ynh_app_version"
    then
      ynh_print_info --message="Removing of Python-"$installed_version
      $pyenv_install_dir/bin/pyenv uninstall --force $installed_version
    fi
  done

  # Set environment for Python users
  echo  "#pyenv
export PYENV_ROOT=$pyenv_install_dir
export PATH=\"$pyenv_install_dir/bin:$PATH\"
eval \"\$(pyenv init -)\"
#pyenv" > /etc/profile.d/pyenv.sh

  # Load the environment
  eval "$(pyenv init -)"

  (cd $final_path
  pyenv local $python_version)

  pyenv virtualenv --force $python_version $YNH_APP_INSTANCE_NAME
}

# Remove the version of Python used by the app.
#
# This helper will check if another app uses the same version of Python,
# if not, this version of Python will be removed.
# If no other app uses Python, pyenv will be also removed.
#
# usage: ynh_remove_python
ynh_remove_python () {
  local python_version=$(ynh_app_setting_get --app=$YNH_APP_INSTANCE_NAME --key=python_version)

  # Load pyenv path in PATH
  CLEAR_PATH="$pyenv_install_dir/bin:$PATH"

  # Remove /usr/local/bin in PATH in case of python prior installation
  PATH=$(echo $CLEAR_PATH | sed 's@/usr/local/bin:@@')

  pyenv virtualenv-delete --force $YNH_APP_INSTANCE_NAME

  # Remove the line for this app
  sed --in-place "/$YNH_APP_INSTANCE_NAME:$python_version/d" "$pyenv_install_dir/ynh_app_version"

  # If no other app uses this version of Python, remove it.
  if ! grep --quiet "$python_version" "$pyenv_install_dir/ynh_app_version"
  then
    ynh_print_info --message="Removing of Python-"$python_version
    $pyenv_install_dir/bin/pyenv uninstall --force $python_version
  fi

  # If no other app uses pyenv, remove pyenv and dedicated group
  if [ ! -s "$pyenv_install_dir/ynh_app_version" ]
  then
    ynh_print_info --message="Removing of pyenv"
    ynh_secure_remove --file="$pyenv_install_dir"
    # Remove pyenv environment configuration
    rm /etc/profile.d/pyenv.sh
  fi
}
